KCP PROTOCOL SPECIFICATION


1. Packet (aka. segment) Structure

KCP has only one kind of segment: both the data and control messages are 
encoded into the same structure and share the same header.

The KCP packet (aka. segment) structure is as following:

0               4   5   6       8 (BYTE)
+---------------+---+---+-------+
|     conv      |cmd|frg|  wnd  |
+---------------+---+---+-------+   8
|     ts        |     sn        |
+---------------+---------------+  16
|     una       |     len       |
+---------------+---------------+  24
|                               |
|        DATA (optional)        |
|                               |
+-------------------------------+


- conv: conversation id (32 bits integer)

The conversation id is used to identify each connection, which will not change
during the connection life-time.

It is represented by a 32 bits integer which is given at the moment the KCP
control block (aka. struct ikcpcb, or kcp object) has been created. Each
packet sent out will carry the conversation id in the first 4 bytes and a
packet from remote endpoint will not be accepted if it has a different
conversation id.

The value can be any random number, but in practice, both side between a
connection will have many KCP objects (or control block) storing in the
containers like a map or an array. A index is used as the key to look up one
KCP object from the container. 

So, the higher 16 bits of conversation id can be used as caller's index while
the lower 16 bits can be used as callee's index. KCP will not handle
handshake, and the index in both side can be decided and exchanged after 
connection establish.

When you receive and accept a remote packet, the local index can be extracted
from the conversation id and the kcp object which is in charge of this
connection can be find out from your map or array.


- cmd: command

- frg: fragment count

- wnd: window size

- ts: timestamp

- sn: serial number

- una: un-acknowledged serial number

conv 会话ID
mtu	最大传输单元
mss	最大分片大小
state 连接状态（0xFFFFFFFF表示断开连接）
snd_una 第一个未确认的包
snd_nxt	待发送包的序号
rcv_nxt 待接收消息序号
ssthresh 拥塞窗口阈值
rx_rttvar	ack接收rtt浮动值
rx_srtt ack接收rtt静态值
rx_rto	由ack接收延迟计算出来的复原时间
rx_minrto 最小复原时间
snd_wnd	发送窗口大小
rcv_wnd	接收窗口大小
rmt_wnd,	远端接收窗口大小
cwnd,	拥塞窗口大小
probe 探查变量，IKCP_ASK_TELL表示告知远端窗口大小。IKCP_ASK_SEND表示请求远端告知窗口大小
interval	内部flush刷新间隔
ts_flush 下次flush刷新时间戳
nodelay	是否启动无延迟模式
updated 是否调用过update函数的标识
ts_probe,	下次探查窗口的时间戳
probe_wait 探查窗口需要等待的时间
dead_link	最大重传次数
incr 可发送的最大数据量

fastresend 触发快速重传的重复ack个数
nocwnd	取消拥塞控制
stream 是否采用流传输模式

snd_queue	发送消息的队列
rcv_queue	接收消息的队列
snd_buf 发送消息的缓存
rcv_buf 接收消息的缓存
acklist 待发送的ack列表
buffer 存储消息字节流的内存
output udp发送消息的回调函数

# vim: set ts=4 sw=4 tw=0 noet cc=78 wrap textwidth=78 :

